version: "3.8"

services:
  web:
    build:
      context: .
      dockerfile: DockerFile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env.dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.dev
    environment:
      - POSTGRES_DB=erp_dev
      - POSTGRES_USER=erp_user
      - POSTGRES_PASSWORD=erp_password
    networks:
      - erp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  erp_network:
    driver: bridge
