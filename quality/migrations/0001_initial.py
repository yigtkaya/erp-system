# Generated by Django 5.1.5 on 2025-05-08 21:10

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('manufacturing', '0001_initial'),
        ('purchasing', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InspectionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('inspection_type', models.CharField(choices=[('INCOMING', 'Incoming Inspection'), ('IN_PROCESS', 'In-Process Inspection'), ('FINAL', 'Final Inspection'), ('RANDOM', 'Random Inspection')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.CharField(max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inspection_templates', to='inventory.product')),
            ],
            options={
                'db_table': 'inspection_templates',
                'ordering': ['name', '-version'],
            },
        ),
        migrations.CreateModel(
            name='InspectionParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parameter_name', models.CharField(max_length=100)),
                ('parameter_type', models.CharField(choices=[('NUMERIC', 'Numeric'), ('TEXT', 'Text'), ('BOOLEAN', 'Boolean'), ('CHOICE', 'Choice')], max_length=20)),
                ('unit_of_measure', models.CharField(blank=True, max_length=20, null=True)),
                ('nominal_value', models.CharField(blank=True, max_length=100, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('choices', models.JSONField(blank=True, null=True)),
                ('is_critical', models.BooleanField(default=False)),
                ('sequence_number', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='quality.inspectiontemplate')),
            ],
            options={
                'db_table': 'inspection_parameters',
                'ordering': ['sequence_number', 'parameter_name'],
            },
        ),
        migrations.CreateModel(
            name='QualityInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspection_number', models.CharField(max_length=50, unique=True)),
                ('inspection_type', models.CharField(choices=[('INCOMING', 'Incoming Inspection'), ('IN_PROCESS', 'In-Process Inspection'), ('FINAL', 'Final Inspection'), ('RANDOM', 'Random Inspection')], max_length=20)),
                ('inspection_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('result', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail'), ('CONDITIONAL', 'Conditional Pass'), ('PENDING', 'Pending')], default='PENDING', max_length=20)),
                ('quantity_inspected', models.IntegerField()),
                ('quantity_passed', models.IntegerField(default=0)),
                ('quantity_failed', models.IntegerField(default=0)),
                ('batch_number', models.CharField(blank=True, max_length=50, null=True)),
                ('sample_size', models.IntegerField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('goods_receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='purchasing.goodsreceipt')),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inspections', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.product')),
                ('production_output', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='manufacturing.productionoutput')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quality.inspectiontemplate')),
                ('work_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inspections', to='manufacturing.workorder')),
            ],
            options={
                'db_table': 'quality_inspections',
                'ordering': ['-inspection_date'],
            },
        ),
        migrations.CreateModel(
            name='NonConformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nc_number', models.CharField(max_length=50, unique=True)),
                ('severity', models.CharField(choices=[('CRITICAL', 'Critical'), ('MAJOR', 'Major'), ('MINOR', 'Minor')], max_length=20)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('INVESTIGATING', 'Under Investigation'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], default='OPEN', max_length=20)),
                ('description', models.TextField()),
                ('root_cause', models.TextField(blank=True, null=True)),
                ('corrective_action', models.TextField(blank=True, null=True)),
                ('preventive_action', models.TextField(blank=True, null=True)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assigned_nonconformances', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.product')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reported_nonconformances', to=settings.AUTH_USER_MODEL)),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nonconformances', to='quality.qualityinspection')),
            ],
            options={
                'db_table': 'nonconformances',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InspectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('measured_value', models.CharField(max_length=200)),
                ('is_passed', models.BooleanField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quality.inspectionparameter')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='quality.qualityinspection')),
            ],
            options={
                'db_table': 'inspection_results',
            },
        ),
        migrations.CreateModel(
            name='QualityStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quality_standards',
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='inspectiontemplate',
            name='quality_standard',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='quality.qualitystandard'),
        ),
        migrations.CreateModel(
            name='QualityDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('document_type', models.CharField(choices=[('PROCEDURE', 'Procedure'), ('WORK_INSTRUCTION', 'Work Instruction'), ('SPECIFICATION', 'Specification'), ('FORM', 'Form'), ('MANUAL', 'Manual')], max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('effective_date', models.DateField()),
                ('review_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('approved_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='approved_quality_documents', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_quality_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quality_documents',
                'ordering': ['document_number', '-version'],
                'unique_together': {('document_number', 'version')},
            },
        ),
        migrations.AddIndex(
            model_name='qualityinspection',
            index=models.Index(fields=['inspection_number'], name='quality_ins_inspect_17c1bd_idx'),
        ),
        migrations.AddIndex(
            model_name='qualityinspection',
            index=models.Index(fields=['inspection_type', 'result'], name='quality_ins_inspect_cf532a_idx'),
        ),
        migrations.AddIndex(
            model_name='qualityinspection',
            index=models.Index(fields=['inspection_date'], name='quality_ins_inspect_1af255_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inspectionresult',
            unique_together={('inspection', 'parameter')},
        ),
        migrations.AlterUniqueTogether(
            name='inspectiontemplate',
            unique_together={('name', 'version')},
        ),
    ]
